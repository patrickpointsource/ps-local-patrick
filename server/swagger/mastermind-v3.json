{
    "swagger": "2.0",
    "info": {
        "title": "MasterMind Middleware API",
        "description": "The data storage middleware for MasterMind",
        "version": "3.0.0"
    },
    "host": "localhost:3000",
    "schemes": [
        "http"
    ],
    "basePath": "/v3",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/assignments": {
            "x-handler": "Assignments",
            "get": {
                "summary": "Retrieve Assignments",
                "description": "The Assignments endpoint returns assignments.\n",
                "operationId": "getAssignments",
                "tags": [
                    "Assignments"
                ],
                "parameters": [
                    {
                        "name": "person",
                        "in": "query",
                        "description": "Filter assignments by only those relating to this person (specified by the ID of the Person)",
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Filter assignments to those starting on or after the given date.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Filter assignments to those ending before the given date.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "timePeriod",
                        "in": "query",
                        "description": "Filter assignments to those overlapping the given time period.",
                        "type": "string",
                        "enum": [
                            "past",
                            "present",
                            "future"
                        ]
                    },
                    {
                        "name": "projects",
                        "in": "query",
                        "description": "Filter assignments to those associated with any one of this set of Project IDs.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of assignments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Assignment"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Assignments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Assignment",
                "description": "Create a new assignment.\nAn ID in the POST-ed assignment will be ignored.\n",
                "operationId": "createSingleAssignment",
                "tags": [
                    "Assignments"
                ],
                "parameters": [
                    {
                        "name": "assignment",
                        "in": "body",
                        "description": "Data representing the assignment to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Assignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created assignment",
                        "schema": {
                            "$ref": "#/definitions/Assignment"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Assignments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/assignments/{id}": {
            "x-handler": "Assignments",
            "get": {
                "summary": "Retrieve Assignment",
                "description": "The Assignment endpoint returns a single assignment.\n",
                "operationId": "getSingleAssignment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the assignment to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "200": {
                        "description": "The single assignment specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Assignment"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Assignments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A assignment with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Assignment",
                "description": "Updates an existing assignment.\n",
                "operationId": "updateSingleAssignment",
                "tags": [
                    "Assignments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the assignment to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "assignment",
                        "in": "body",
                        "description": "New data representing the assignment",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Assignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated assignment",
                        "schema": {
                            "$ref": "#/definitions/Assignment"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Assignments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A assignment with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Assignment",
                "description": "Deletes a single Assignment.\n",
                "operationId": "deleteSingleAssignment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the assignment to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "200": {
                        "description": "The single assignment specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Assignments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A assignment with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/clients": {
            "x-handler": "Clients",
            "get": {
                "summary": "Retrieve Clients",
                "description": "The Clients endpoint returns clients.\n",
                "operationId": "getClients",
                "tags": [
                    "Clients"
                ],
                "responses": {
                    "200": {
                        "description": "An array of clients",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Client"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Clients",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Client",
                "description": "Create a new client.\nAn ID in the POST-ed client will be ignored.\n",
                "operationId": "createSingleClient",
                "tags": [
                    "Clients"
                ],
                "parameters": [
                    {
                        "name": "client",
                        "in": "body",
                        "description": "Data representing the client to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created client",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Clients",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/clients/{id}": {
            "x-handler": "Clients",
            "get": {
                "summary": "Retrieve Client",
                "description": "The Client endpoint returns a single client.\n",
                "operationId": "getSingleClient",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Clients"
                ],
                "responses": {
                    "200": {
                        "description": "The single client specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Clients",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A client with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Client",
                "description": "Updates an existing Client.\n",
                "operationId": "updateSingleClient",
                "tags": [
                    "Clients"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "client",
                        "in": "body",
                        "description": "New data representing the client",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated client",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Clients",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A client with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Client",
                "description": "Deletes a single Client.\n",
                "operationId": "deleteSingleClient",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Clients"
                ],
                "responses": {
                    "200": {
                        "description": "The single client specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Clients",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A client with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/configurations": {
            "x-handler": "Configurations",
            "get": {
                "summary": "Retrieve Configurations",
                "description": "The Configurations endpoint returns configurations.\n",
                "operationId": "getConfigurations",
                "tags": [
                    "Configurations"
                ],
                "responses": {
                    "200": {
                        "description": "An array of configurations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Configuration"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Configurations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Configuration",
                "description": "Create a new configuration.\nAn ID in the POST-ed configuration will be ignored.\n",
                "operationId": "createSingleConfiguration",
                "tags": [
                    "Configurations"
                ],
                "parameters": [
                    {
                        "name": "configuration",
                        "in": "body",
                        "description": "Data representing the configuration to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created configuration",
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Configurations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/configurations/{id}": {
            "x-handler": "Configurations",
            "get": {
                "summary": "Retrieve Configuration",
                "description": "The Configuration endpoint returns a single configuration.\n",
                "operationId": "getSingleConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the configuration to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Configurations"
                ],
                "responses": {
                    "200": {
                        "description": "The single configuration specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Configurations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A configuration with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Configuration",
                "description": "Updates an existing configuration.\n",
                "operationId": "updateSingleConfiguration",
                "tags": [
                    "Configurations"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the configuration to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "configuration",
                        "in": "body",
                        "description": "New data representing the configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated configuration",
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Configurations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A configuration with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Configuration",
                "description": "Deletes a single Configuration.\n",
                "operationId": "deleteSingleConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the configuration to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Configurations"
                ],
                "responses": {
                    "200": {
                        "description": "The single configuration specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Configurations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A configuration with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/departments/codes/available": {
            "x-handler": "Departments",
            "get": {
                "summary": "Retrieve un-used department codes",
                "operationId": "getAvailableDepartmentCodes",
                "tags": [
                    "Departments"
                ],
                "responses": {
                    "200": {
                        "description": "An array of department codes matching the existing format that aren't currently in use",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Departments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/departments/categories": {
            "x-handler": "DepartmentCategories",
            "get": {
                "summary": "Retrieve Department Categories",
                "description": "The Department Categories endpoint returns department categories.\n",
                "operationId": "getDepartmentCategories",
                "tags": [
                    "DepartmentCategories"
                ],
                "responses": {
                    "200": {
                        "description": "An array of department categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DepartmentCategory"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Department Categories",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Department Category",
                "description": "Create a new department category.\nAn ID in the POST-ed department category will be ignored.\n",
                "operationId": "createSingleDepartmentCategory",
                "tags": [
                    "DepartmentCategories"
                ],
                "parameters": [
                    {
                        "name": "departmentCategory",
                        "in": "body",
                        "description": "Data representing the Department Category to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DepartmentCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created Department Category",
                        "schema": {
                            "$ref": "#/definitions/DepartmentCategory"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Department Categories",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/departments/categories/{id}": {
            "x-handler": "DepartmentCategories",
            "get": {
                "summary": "Retrieve Department Category",
                "description": "The Department Category endpoint returns a single department category.\n",
                "operationId": "getSingleDepartmentCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the department category to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "DepartmentCategories"
                ],
                "responses": {
                    "200": {
                        "description": "The single department category specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/DepartmentCategory"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Department Categories",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A department category with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Department Category",
                "description": "Updates an existing department category.\n",
                "operationId": "updateSingleDepartmentCategory",
                "tags": [
                    "DepartmentCategories"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the department category to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "departmentCategory",
                        "in": "body",
                        "description": "New data representing the department category",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DepartmentCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated department category",
                        "schema": {
                            "$ref": "#/definitions/DepartmentCategory"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Department Categories",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A department category with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Department Category",
                "description": "Deletes a single Department Category.\n",
                "operationId": "deleteSingleDepartmentCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the department category to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "DepartmentCategories"
                ],
                "responses": {
                    "200": {
                        "description": "The single department category specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Department Categories",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A department category with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/departments": {
            "x-handler": "Departments",
            "get": {
                "summary": "Retrieve Departments",
                "description": "The Departments endpoint returns departments.\n",
                "operationId": "getDepartments",
                "tags": [
                    "Departments"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Filter departments to only those with this code",
                        "type": "string"
                    },
                    {
                        "name": "manager",
                        "in": "query",
                        "description": "Filter departments to only those with the given manager, identified by ID",
                        "type": "string"
                    },
                    {
                        "name": "nickname",
                        "in": "query",
                        "description": "Filter departments to only those whose nickname contains the given string",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of departments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Department"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Departments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Department",
                "description": "Create a new department.\nAn ID in the POST-ed department will be ignored.\n",
                "operationId": "createSingleDepartment",
                "tags": [
                    "Departments"
                ],
                "parameters": [
                    {
                        "name": "department",
                        "in": "body",
                        "description": "Data representing the department to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created department",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Departments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/departments/{id}": {
            "x-handler": "Departments",
            "get": {
                "summary": "Retrieve Department",
                "description": "The Department endpoint returns a single department.\n",
                "operationId": "getSingleDepartment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the department to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Departments"
                ],
                "responses": {
                    "200": {
                        "description": "The single department specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Departments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A department with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Department",
                "description": "Updates an existing department.\n",
                "operationId": "updateSingleDepartment",
                "tags": [
                    "Departments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the department to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "department",
                        "in": "body",
                        "description": "New data representing the department",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated department",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Departments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A department with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Department",
                "description": "Deletes a single Department.\n",
                "operationId": "deleteSingleDepartment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the department to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Departments"
                ],
                "responses": {
                    "200": {
                        "description": "The single department specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Departments",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A department with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/holidays": {
            "x-handler": "Holidays",
            "get": {
                "summary": "Retrieve Holidays",
                "description": "The Holidays endpoint returns holidays.\n",
                "operationId": "getHolidays",
                "tags": [
                    "Holidays"
                ],
                "responses": {
                    "200": {
                        "description": "An array of holidays",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Holiday"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Holidays",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Holiday",
                "description": "Create a new holiday.\nAn ID in the POST-ed holiday will be ignored.\n",
                "operationId": "createSingleHoliday",
                "tags": [
                    "Holidays"
                ],
                "parameters": [
                    {
                        "name": "holiday",
                        "in": "body",
                        "description": "Data representing the holiday to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Holiday"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created holiday",
                        "schema": {
                            "$ref": "#/definitions/Holiday"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Holidays",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/holidays/{id}": {
            "x-handler": "Holidays",
            "get": {
                "summary": "Retrieve Holiday",
                "description": "The Holiday endpoint returns a single holiday.\n",
                "operationId": "getSingleHoliday",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the holiday to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Holidays"
                ],
                "responses": {
                    "200": {
                        "description": "The single holiday specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Holiday"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view holidays",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A holiday with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Holiday",
                "description": "Updates an existing holiday.\n",
                "operationId": "updateSingleHoliday",
                "tags": [
                    "Holidays"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the holiday to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "holiday",
                        "in": "body",
                        "description": "New data representing the holiday",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Holiday"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated holiday",
                        "schema": {
                            "$ref": "#/definitions/Holiday"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Holidays",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A holiday with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Holiday",
                "description": "Deletes a single Holiday.\n",
                "operationId": "deleteSingleHoliday",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the holiday to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Holidays"
                ],
                "responses": {
                    "200": {
                        "description": "The single holiday specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Holidays",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A holiday with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hours": {
            "x-handler": "Hours",
            "get": {
                "summary": "Retrieve Hours",
                "description": "The Hours endpoint returns hours.\n",
                "operationId": "getHours",
                "tags": [
                    "Hours"
                ],
                "parameters": [
                    {
                        "name": "person",
                        "in": "query",
                        "description": "Filter hours records to those belonging to the given person, identified by ID",
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Filter hours records to those on or after the given date",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Filter hours records to those before the given date",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "projects",
                        "in": "query",
                        "description": "Filter hours records to those connected to one of the indicated projects, identified by ID",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tasks",
                        "in": "query",
                        "description": "Filter hours records to those connected to one of the indicated tasks, identified by ID",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter hours based on a complex query format. Format details TBD",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of hours",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hours"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Hours",
                "description": "Create a new hours record.\nAn ID in the POST-ed body will be ignored.\n",
                "operationId": "createSingleHour",
                "tags": [
                    "Hours"
                ],
                "parameters": [
                    {
                        "name": "hours",
                        "in": "body",
                        "description": "Data representing the Hours to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Hours"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created hours",
                        "schema": {
                            "$ref": "#/definitions/Hours"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hours/{id}": {
            "x-handler": "Hours",
            "get": {
                "summary": "Retrieve Hours",
                "description": "The Hours endpoint returns a single hours record.\n",
                "operationId": "getSingleHour",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the hours to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Hours"
                ],
                "responses": {
                    "200": {
                        "description": "The single hours record specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Hours"
                        }
                    },
                    "404": {
                        "description": "A hours record with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Hours",
                "description": "Updates an existing hours record.\n",
                "operationId": "updateSingleHour",
                "tags": [
                    "Hours"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the hours to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "hours",
                        "in": "body",
                        "description": "New data representing the hours record",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Hours"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated hours record",
                        "schema": {
                            "$ref": "#/definitions/Hours"
                        }
                    },
                    "404": {
                        "description": "A hours record with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Hours",
                "description": "Deletes a single hours record.\n",
                "operationId": "deleteSingleHour",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the hours record to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Hours"
                ],
                "responses": {
                    "200": {
                        "description": "The single hours record specified by the ID was deleted"
                    },
                    "404": {
                        "description": "A hours record with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/links": {
            "x-handler": "Links",
            "get": {
                "summary": "Retrieve Links",
                "description": "The Links endpoint returns links.\n",
                "operationId": "getLinks",
                "tags": [
                    "Links"
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "description": "Filter links to those belonging to the given project, identified by ID",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of links",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Link"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Links",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Link",
                "description": "Create a new link.\nAn ID in the POST-ed link will be ignored.\n",
                "operationId": "createSingleLink",
                "tags": [
                    "Links"
                ],
                "parameters": [
                    {
                        "name": "link",
                        "in": "body",
                        "description": "Data representing the link to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Link"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created link",
                        "schema": {
                            "$ref": "#/definitions/Link"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Links",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/links/{id}": {
            "x-handler": "Links",
            "get": {
                "summary": "Retrieve Link",
                "description": "The Link endpoint returns a single link.\n",
                "operationId": "getSingleLink",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the link to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Links"
                ],
                "responses": {
                    "200": {
                        "description": "The single link specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Link"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Links",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A link with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Link",
                "description": "Updates an existing link.\n",
                "operationId": "updateSingleLink",
                "tags": [
                    "Links"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the link to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "link",
                        "in": "body",
                        "description": "New data representing the link",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Link"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated link",
                        "schema": {
                            "$ref": "#/definitions/Link"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Links",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A link with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Link",
                "description": "Deletes a single Link.\n",
                "operationId": "deleteSingleLink",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the link to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Links"
                ],
                "responses": {
                    "200": {
                        "description": "The single link specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Links",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A link with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "x-handler": "Notifications",
            "get": {
                "summary": "Retrieve Notifications",
                "description": "The Notifications endpoint returns notifications.\n",
                "operationId": "getNotifications",
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "name": "person",
                        "in": "query",
                        "description": "Filter notifications to those for the given person, provided by ID",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of notifications",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Notification"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Notifications",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Notification",
                "description": "Create a new notification.\nAn ID in the POST-ed notification will be ignored.\n",
                "operationId": "createSingleNotification",
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "name": "notification",
                        "in": "body",
                        "description": "Data representing the notification to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Notification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created notification",
                        "schema": {
                            "$ref": "#/definitions/Notification"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Notifications",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "x-handler": "Notifications",
            "get": {
                "summary": "Retrieve Notification",
                "description": "The Notification endpoint returns a single notification.\n",
                "operationId": "getSingleNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the notification to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Notifications"
                ],
                "responses": {
                    "200": {
                        "description": "The single notification specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Notification"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Notifications",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A notification with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Notification",
                "description": "Updates an existing notification.\n",
                "operationId": "updateSingleNotification",
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the notification to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "notification",
                        "in": "body",
                        "description": "New data representing the notification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Notification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated notification",
                        "schema": {
                            "$ref": "#/definitions/Notification"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Notifications",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A notification with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Notification",
                "description": "Deletes a single Notification.\n",
                "operationId": "deleteSingleNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the notification to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Notifications"
                ],
                "responses": {
                    "200": {
                        "description": "The single notification specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Notifications",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A notification with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve People",
                "description": "The People endpoint returns people.\n",
                "operationId": "getPeople",
                "tags": [
                    "People"
                ],
                "parameters": [
                    {
                        "name": "primaryRoles",
                        "in": "query",
                        "description": "Filter people to only those with one of the given roles as their primary role, identified by ID.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roles",
                        "in": "query",
                        "description": "Filter people to only those belonging to a given role, identified by ID.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "Filter people to only those that are active",
                        "type": "boolean"
                    },
                    {
                        "name": "hasAssignment",
                        "in": "query",
                        "description": "Filter people to only those who have an assignment",
                        "type": "boolean"
                    },
                    {
                        "name": "hasCurrentAssignment",
                        "in": "query",
                        "description": "Filter people to only those who have a current assignment",
                        "type": "boolean"
                    },
                    {
                        "name": "departmentCategories",
                        "in": "query",
                        "description": "Filter people to only those belonging to one of the given department categories, identified by ID.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sameAssignmentsAs",
                        "in": "query",
                        "description": "Filter people to only those who have a current assignment to the same project as the given person is assigned to, where the person is identied by ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of people",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Person"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Person",
                "description": "Create a new person.\nAn ID in the POST-ed person will be ignored.\n",
                "operationId": "createSinglePerson",
                "tags": [
                    "People"
                ],
                "parameters": [
                    {
                        "name": "person",
                        "in": "body",
                        "description": "Data representing the person to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created person",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people/googlePlus/{id}": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve Person",
                "description": "The People endpoint returns a single person by Google ID.\n",
                "operationId": "getSinglePersonByGoogleID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Google ID of the person to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The single person specified by the Google ID",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people/me": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve Person",
                "description": "The People endpoint returns the single person that is presently logged in.\n",
                "operationId": "getSinglePersonLoggedIn",
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The single person who is logged in.",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "403": {
                        "description": "The current user is not logged in.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people/{id}": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve Person",
                "description": "The People endpoint returns a single person.\n",
                "operationId": "getSinglePerson",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the person to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The single person specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Person",
                "description": "Updates an existing person.\n",
                "operationId": "updateSinglePerson",
                "tags": [
                    "People"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the person to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "person",
                        "in": "body",
                        "description": "New data representing the person",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated person",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Person",
                "description": "Deletes a single Person.\n",
                "operationId": "deleteSinglePerson",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the person to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The single person specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people/{id}/manager": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve Manager of Person",
                "operationId": "getManagerOfPerson",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the person whose manager should be retrieved.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The manager of the person specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people/{id}/accessRights": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve Access Rights of Person",
                "operationId": "getAccessRightsOfPerson",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the person whose access rights should be retrieved.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The access rights of the person specified by ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "hasFinanceRights": {
                                    "type": "boolean"
                                },
                                "hasAdminRights": {
                                    "type": "boolean"
                                },
                                "hasManagementRights": {
                                    "type": "boolean"
                                },
                                "hasProjectManagementRights": {
                                    "type": "boolean"
                                },
                                "hasExecutiveRights": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/people/{id}/googleProfile": {
            "x-handler": "People",
            "get": {
                "summary": "Retrieve Google Profile of Person",
                "operationId": "getGoogleProfileOfPerson",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the person whose Google Profile should be retrieved.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The Google Profile of the person specified by ID",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view People",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A person with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{projectID}/phases/{phaseID}/roles": {
            "x-handler": "ProjectPhaseRoles",
            "get": {
                "summary": "Retrieve Project Phase Roles",
                "description": "The Project Phase Roles endpoint returns project phase roles.\n",
                "operationId": "getProjectPhaseRoles",
                "tags": [
                    "ProjectPhaseRoles"
                ],
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which roles should be retrieved.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phaseID",
                        "in": "path",
                        "description": "ID of the project phase for which roles should be retrieved.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of project phase roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProjectPhaseRole"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Project Phase Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Project Phase Role",
                "description": "Create a new project phase role.\nAn ID in the POST-ed project phase role will be ignored.\n",
                "operationId": "createSingleProjectPhaseRole",
                "tags": [
                    "ProjectPhaseRoles"
                ],
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the role should be created.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phaseID",
                        "in": "path",
                        "description": "ID of the project phase for which the role should be created.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "projectPhaseRole",
                        "in": "body",
                        "description": "Data representing the project phase role to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectPhaseRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created project phaseRole",
                        "schema": {
                            "$ref": "#/definitions/ProjectPhaseRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Project Phase Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{projectID}/phases/{phaseID}/roles/{id}": {
            "x-handler": "ProjectPhaseRoles",
            "get": {
                "summary": "Retrieve Project Phase Role",
                "description": "The Project Phase Role endpoint returns a single project phase role.\n",
                "operationId": "getSingleProjectPhaseRole",
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the role should be retrieved.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phaseID",
                        "in": "path",
                        "description": "ID of the project phase for which the role should be retrieved.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project phase role to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "ProjectPhaseRoles"
                ],
                "responses": {
                    "200": {
                        "description": "The single project phase role specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/ProjectPhaseRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Project Phase Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project phase role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Project Phase Role",
                "description": "Updates an existing project phase role.\n",
                "operationId": "updateSingleProjectPhaseRole",
                "tags": [
                    "ProjectPhaseRoles"
                ],
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the role should be updated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phaseID",
                        "in": "path",
                        "description": "ID of the project phase for which the role should be updated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project phase role to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "projectPhaseRole",
                        "in": "body",
                        "description": "New data representing the project phase role",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectPhaseRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated project phase role",
                        "schema": {
                            "$ref": "#/definitions/ProjectPhaseRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Project Phase Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project phase role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Project Phase Role",
                "description": "Deletes a single Project Phase Role.\n",
                "operationId": "deleteSingleProjectPhaseRole",
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the role should be deleted.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phaseID",
                        "in": "path",
                        "description": "ID of the project phase for which the role should be deleted.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project phase role to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "ProjectPhaseRoles"
                ],
                "responses": {
                    "200": {
                        "description": "The single project phase role specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Project Phase Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project phase role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{projectID}/phases": {
            "x-handler": "ProjectPhases",
            "get": {
                "summary": "Retrieve Project Phases",
                "description": "The Project Phases endpoint returns project phases.\n",
                "operationId": "getProjectPhases",
                "tags": [
                    "ProjectPhases"
                ],
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the phases should be retrieved.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of project phases",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProjectPhase"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Project Phases",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Project Phase",
                "description": "Create a new project phase.\nAn ID in the POST-ed project phase will be ignored.\n",
                "operationId": "createSingleProjectPhase",
                "tags": [
                    "ProjectPhases"
                ],
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the phase should be created.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "projectPhase",
                        "in": "body",
                        "description": "Data representing the project phase to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectPhase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created project phase",
                        "schema": {
                            "$ref": "#/definitions/ProjectPhase"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Project Phases",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{projectID}/phases/{id}": {
            "x-handler": "ProjectPhases",
            "get": {
                "summary": "Retrieve Project Phase",
                "description": "The Project Phase endpoint returns a single project phase.\n",
                "operationId": "getSingleProjectPhase",
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the phases should be retrieved.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project phase to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "ProjectPhases"
                ],
                "responses": {
                    "200": {
                        "description": "The single project phase specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/ProjectPhase"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Project Phases",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project phase with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Project Phase",
                "description": "Updates an existing project phase.\n",
                "operationId": "updateSingleProjectPhase",
                "tags": [
                    "ProjectPhases"
                ],
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the phase should be updated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project phase to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "projectPhase",
                        "in": "body",
                        "description": "New data representing the project phase",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectPhase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated project phase",
                        "schema": {
                            "$ref": "#/definitions/ProjectPhase"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Project Phases",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project phase with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Project Phase",
                "description": "Deletes a single Project Phase.\n",
                "operationId": "deleteSingleProjectPhase",
                "parameters": [
                    {
                        "name": "projectID",
                        "in": "path",
                        "description": "ID of the project for which the phase should be deleted.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project phase to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "ProjectPhases"
                ],
                "responses": {
                    "200": {
                        "description": "The single project phase specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Project Phases",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project phase with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects": {
            "x-handler": "Projects",
            "get": {
                "summary": "Retrieve Projects",
                "description": "The Projects endpoint returns projects.\n",
                "operationId": "getProjects",
                "tags": [
                    "Projects"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "A set of ids to which this set should be reduced.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "executiveSponsor",
                        "in": "query",
                        "description": "Filter projects by only those belonging to this executive sponsor (specified by the ID of the executive sponsor Person)",
                        "type": "string"
                    },
                    {
                        "name": "committed",
                        "in": "query",
                        "description": "Filter projects by only those that are committed",
                        "type": "boolean"
                    },
                    {
                        "name": "current",
                        "in": "query",
                        "description": "Filter projects by only those that are current",
                        "type": "boolean"
                    },
                    {
                        "name": "person",
                        "in": "query",
                        "description": "Filter projects to those to whom the person is assigned, where the person is provided by ID",
                        "type": "string"
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "description": "Filter projects to those in one of the given states",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "planning",
                                "active",
                                "done",
                                "poc",
                                "preSales",
                                "supportActive",
                                "clientActive"
                            ]
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Filter projects to those of one of the given types",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "invest",
                                "poc",
                                "paid"
                            ]
                        }
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Filter projects to those starting on or after the given date.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Filter projects to those ending before the given date.",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of projects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Project"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Projects",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Project",
                "description": "Create a new project.\nAn ID in the POST-ed project will be ignored.\n",
                "operationId": "createSingleProject",
                "tags": [
                    "Projects"
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "body",
                        "description": "Data representing the project to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created project",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Projects",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "x-handler": "Projects",
            "get": {
                "summary": "Retrieve Project",
                "description": "The Project endpoint returns a single project.\n",
                "operationId": "getSingleProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Projects"
                ],
                "responses": {
                    "200": {
                        "description": "The single project specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Projects",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Project",
                "description": "Updates an existing project.\n",
                "operationId": "updateSingleProject",
                "tags": [
                    "Projects"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "body",
                        "description": "New data representing the project",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated project",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Projects",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Project",
                "description": "Deletes a single Project.\n",
                "operationId": "deleteSingleProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the project to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Projects"
                ],
                "responses": {
                    "200": {
                        "description": "The single project specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Projects",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A project with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/report-favorites": {
            "get": {
                "summary": "ReportFavorites (IGNORE)",
                "description": "The ReportFavorites endpoint returns information about report favorites.\n",
                "tags": [
                    "ReportFavorites"
                ],
                "responses": {
                    "200": {
                        "description": "An array of report favorites",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportFavorite"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/reports/utilization": {
            "x-handler": "Reports",
            "get": {
                "summary": "Utilization Report",
                "description": "Get the utilization of a singler person or all people in a department",
                "operationId": "getUtilizationReport",
                "tags": [
                    "Reports"
                ],
                "parameters": [
                    {
                        "name": "department",
                        "in": "query",
                        "description": "The ID of the department for whose people the hours should be retrieved. Overridden by person.",
                        "type": "string"
                    },
                    {
                        "name": "person",
                        "in": "query",
                        "description": "The ID of the person whose hours should be retrieved. Overrides department.",
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Filter projects to those starting on or after the given date.",
                        "type": "string",
                        "format": "date",
                        "required": true
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Filter projects to those ending before the given date.",
                        "type": "string",
                        "format": "date",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested utilization report",
                        "schema": {
                            "$ref": "#/definitions/UtilizationReport"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Reports",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/roles": {
            "x-handler": "Roles",
            "get": {
                "summary": "Retrieve Roles",
                "description": "The Roles endpoint returns roles.\n",
                "operationId": "getRoles",
                "tags": [
                    "Roles"
                ],
                "responses": {
                    "200": {
                        "description": "An array of roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Role",
                "description": "Create a new role.\nAn ID in the POST-ed role will be ignored.\n",
                "operationId": "createSingleRole",
                "tags": [
                    "Roles"
                ],
                "parameters": [
                    {
                        "name": "role",
                        "in": "body",
                        "description": "Data representing the role to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created role",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "x-handler": "Roles",
            "get": {
                "summary": "Retrieve Role",
                "description": "The Role endpoint returns a single role.\n",
                "operationId": "getSingleRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the role to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Roles"
                ],
                "responses": {
                    "200": {
                        "description": "The single role specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Role",
                "description": "Updates an existing role.\n",
                "operationId": "updateSingleRole",
                "tags": [
                    "Roles"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the role to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "role",
                        "in": "body",
                        "description": "New data representing the role",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated role",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Role",
                "description": "Deletes a single Role.\n",
                "operationId": "deleteSingleRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the role to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Roles"
                ],
                "responses": {
                    "200": {
                        "description": "The single role specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/securityRoles": {
            "x-handler": "SecurityRoles",
            "get": {
                "summary": "Retrieve Security Roles",
                "description": "The Security Roles endpoint returns security roles.\n",
                "operationId": "getSecurityRoles",
                "tags": [
                    "SecurityRoles"
                ],
                "responses": {
                    "200": {
                        "description": "An array of security roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SecurityRole"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Security Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Security Role",
                "description": "Create a new security role.\nAn ID in the POST-ed security role will be ignored.\n",
                "operationId": "createSingleSecurityRole",
                "tags": [
                    "SecurityRoles"
                ],
                "parameters": [
                    {
                        "name": "securityRole",
                        "in": "body",
                        "description": "Data representing the security role to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecurityRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created security role",
                        "schema": {
                            "$ref": "#/definitions/SecurityRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Security Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/securityRoles/{id}": {
            "x-handler": "SecurityRoles",
            "get": {
                "summary": "Retrieve Security Role",
                "description": "The Security Role endpoint returns a single security role.\n",
                "operationId": "getSingleSecurityRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the security role to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "SecurityRoles"
                ],
                "responses": {
                    "200": {
                        "description": "The single security role specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/SecurityRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Security Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A security role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Security Role",
                "description": "Updates an existing security role.\n",
                "operationId": "updateSingleSecurityRole",
                "tags": [
                    "SecurityRoles"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the security role to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "securityRole",
                        "in": "body",
                        "description": "New data representing the security role",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecurityRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated security role",
                        "schema": {
                            "$ref": "#/definitions/SecurityRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Security Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A security role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Security Role",
                "description": "Deletes a single Security Role.\n",
                "operationId": "deleteSingleSecurityRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the security role to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "SecurityRoles"
                ],
                "responses": {
                    "200": {
                        "description": "The single security role specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Security Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A security role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/skills": {
            "x-handler": "Skills",
            "get": {
                "summary": "Retrieve Skills",
                "description": "The Skills endpoint returns skills.\n",
                "operationId": "getSkills",
                "tags": [
                    "Skills"
                ],
                "responses": {
                    "200": {
                        "description": "An array of skills",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Skill"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Skills",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Skill",
                "description": "Create a new skill.\nAn ID in the POST-ed skill will be ignored.\n",
                "operationId": "createSingleSkill",
                "tags": [
                    "Skills"
                ],
                "parameters": [
                    {
                        "name": "skill",
                        "in": "body",
                        "description": "Data representing the skill to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created skill",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Skills",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/skills/{id}": {
            "x-handler": "Skills",
            "get": {
                "summary": "Retrieve Skill",
                "description": "The Skill endpoint returns a single skill.\n",
                "operationId": "getSingleSkill",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Skills"
                ],
                "responses": {
                    "200": {
                        "description": "The single skill specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Skills",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A skill with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Skill",
                "description": "Updates an existing skill.\n",
                "operationId": "updateSingleSkill",
                "tags": [
                    "Skills"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "skill",
                        "in": "body",
                        "description": "New data representing the skill",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated skill",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Skills",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A skill with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Skill",
                "description": "Deletes a single Skill.\n",
                "operationId": "deleteSingleSkill",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Skills"
                ],
                "responses": {
                    "200": {
                        "description": "The single skill specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Skills",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A skill with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "x-handler": "Tasks",
            "get": {
                "summary": "Retrieve Tasks",
                "description": "The Tasks endpoint returns tasks.\n",
                "operationId": "getTasks",
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "A string to match against the 'name' field on tasks. Could be a full/exact name or might be a substring to match against full task names in the database",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of tasks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Tasks",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Task",
                "description": "Create a new task.\nAn 'id' or 'created' field in the POST-ed task will be ignored.\n",
                "operationId": "createSingleTask",
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "name": "task",
                        "in": "body",
                        "description": "Data representing the Task to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created task",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Tasks",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "x-handler": "Tasks",
            "get": {
                "summary": "Retrieve Task",
                "description": "The Task endpoint returns a single task.\n",
                "operationId": "getSingleTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the task to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "200": {
                        "description": "The single task specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Tasks",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A task with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Task",
                "description": "Updates an existing task.\n",
                "operationId": "updateSingleTask",
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the task to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "task",
                        "in": "body",
                        "description": "New data representing the Task",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated task",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Tasks",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A task with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Task",
                "description": "Deletes a single Task.\n",
                "operationId": "deleteSingleTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the task to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "200": {
                        "description": "The single task specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Tasks",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A task with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/userRoles": {
            "x-handler": "UserRoles",
            "get": {
                "summary": "Retrieve User Roles",
                "description": "The User Roles endpoint returns user roles.\n",
                "operationId": "getUserRoles",
                "tags": [
                    "UserRoles"
                ],
                "responses": {
                    "200": {
                        "description": "An array of user roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserRole"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view user roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create User Role",
                "description": "Create a new user role.\nAn ID in the POST-ed user role will be ignored.\n",
                "operationId": "createSingleUserRole",
                "tags": [
                    "UserRoles"
                ],
                "parameters": [
                    {
                        "name": "userRole",
                        "in": "body",
                        "description": "Data representing the user role to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created user role",
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new User Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/userRoles/{id}": {
            "x-handler": "UserRoles",
            "get": {
                "summary": "Retrieve User Role",
                "description": "The User Roles endpoint returns a single user role.\n",
                "operationId": "getSingleUserRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user role to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "UserRoles"
                ],
                "responses": {
                    "200": {
                        "description": "The single user role specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view User Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A user role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update User Role",
                "description": "Updates an existing User Role.\n",
                "operationId": "updateSingleUserRole",
                "tags": [
                    "UserRoles"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user role to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRole",
                        "in": "body",
                        "description": "New data representing the user role",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated user role",
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update User Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A user role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete User Role",
                "description": "Deletes a single User Role.\n",
                "operationId": "deleteSingleUserRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user role to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "UserRoles"
                ],
                "responses": {
                    "200": {
                        "description": "The single user role specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete User Roles",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A user role with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/vacations": {
            "x-handler": "Vacations",
            "get": {
                "summary": "Retrieve Vacations",
                "description": "The Vacations endpoint returns vacations.\n",
                "operationId": "getVacations",
                "tags": [
                    "Vacations"
                ],
                "parameters": [
                    {
                        "name": "people",
                        "in": "query",
                        "description": "Filter vacations by only those belonging to one of these people (specified by the ID of the people)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Filter vacations to only those in one of the given statuses",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Approved",
                                "Pending",
                                "Cancelled",
                                "Denied"
                            ]
                        }
                    },
                    {
                        "name": "manager",
                        "in": "query",
                        "description": "Filter vacations to only those which have this person as the manager (specified by the ID of the manager Person)",
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Filter vacations to those starting on or after the given date.",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Filter vacations to those ending before the given date.",
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of vacations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Vacation"
                            }
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Vacations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Vacation",
                "description": "Create a new vacation.\nAn ID in the POST-ed vacation will be ignored.\n",
                "operationId": "createSingleVacation",
                "tags": [
                    "Vacations"
                ],
                "parameters": [
                    {
                        "name": "vacation",
                        "in": "body",
                        "description": "Data representing the vacation to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Vacation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created vacation",
                        "schema": {
                            "$ref": "#/definitions/Vacation"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to create new Vacations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/vacations/{id}": {
            "x-handler": "Vacations",
            "get": {
                "summary": "Retrieve Vacation",
                "description": "The Vacation endpoint returns a single vacation.\n",
                "operationId": "getSingleVacation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the vacation to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Vacations"
                ],
                "responses": {
                    "200": {
                        "description": "The single vacation specified by the ID",
                        "schema": {
                            "$ref": "#/definitions/Vacation"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to view Vacations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A vacation with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Vacation",
                "description": "Updates an existing vacation.\n",
                "operationId": "updateSingleVacation",
                "tags": [
                    "Vacations"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the vacation to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "vacation",
                        "in": "body",
                        "description": "New data representing the vacation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Vacation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated vacation",
                        "schema": {
                            "$ref": "#/definitions/Vacation"
                        }
                    },
                    "403": {
                        "description": "The current user is not allowed to update Vacations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A vacation with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Vacation",
                "description": "Deletes a single vacation.\n",
                "operationId": "deleteSingleVacation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the vacation to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Vacations"
                ],
                "responses": {
                    "200": {
                        "description": "The single vacation specified by the ID was deleted"
                    },
                    "403": {
                        "description": "The current user is not allowed to delete Vacations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "A vacation with the specified ID could not be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Assignment": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "hoursPerWeek": {
                    "type": "number"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isFuture": {
                    "type": "boolean"
                },
                "isPast": {
                    "type": "boolean"
                },
                "percentage": {
                    "type": "number"
                },
                "person": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "project": {
                    "type": "string",
                    "description": "ID of Project"
                },
                "role": {
                    "type": "string",
                    "description": "ID of the Project Role"
                },
                "startDate": {
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "type": "string",
                    "format": "date"
                }
            },
            "required": [
                "role",
                "person",
                "project",
                "startDate"
            ]
        },
        "Client": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "Configuration": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "config": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ]
                    }
                }
            },
            "required": [
                "config",
                "properties"
            ]
        },
        "Department": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "description": "ID of Department Category"
                },
                "code": {
                    "type": "string",
                    "description": "The department code"
                },
                "manager": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "people": {
                    "type": "array",
                    "description": "An array of Person IDs that belong to this department",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "code",
                "nickname",
                "category"
            ]
        },
        "DepartmentCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "trimmedValue": {
                    "type": "string"
                },
                "nicknames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "trimmedValue"
            ]
        },
        "Holiday": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "date": {
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "Hours": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "date": {
                    "type": "string",
                    "format": "date"
                },
                "description": {
                    "type": "string"
                },
                "hours": {
                    "type": "number"
                },
                "person": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "task": {
                    "type": "string",
                    "description": "ID of Task"
                },
                "project": {
                    "type": "string",
                    "description": "ID of Project"
                }
            },
            "required": [
                "hours",
                "description",
                "person"
            ]
        },
        "Link": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "resource": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "homePage": {
                    "type": "string"
                },
                "currentPlans": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "dashboard": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "description": "ID of Project"
                }
            },
            "required": [
                "project"
            ]
        },
        "Notification": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "header": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "person": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "ID of model"
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of model (e.g. Vacation)"
                        }
                    }
                }
            },
            "required": [
                "person",
                "type"
            ]
        },
        "Account": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "agreedToTerms": {
                    "type": "boolean"
                },
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "changePasswordAtNextLogin": {
                    "type": "boolean"
                },
                "creationTime": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "address": {
                                "type": "string"
                            },
                            "primary": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "includeInGlobalAddressList": {
                    "type": "boolean"
                },
                "ipWhitelisted": {
                    "type": "boolean"
                },
                "isAdmin": {
                    "type": "boolean"
                },
                "isDelegatedAdmin": {
                    "type": "boolean"
                },
                "isMailboxSetup": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "lastLoginTime": {
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/name"
                },
                "nonEditableAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orgUnitPath": {
                    "type": "string"
                },
                "phones": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                },
                "primaryEmail": {
                    "type": "string"
                },
                "suspended": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "thumbnailPhotoUrl": {
                    "type": "string"
                },
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Person": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "ID of Account"
                    }
                },
                "googleId": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isActive": {
                    "type": "string"
                },
                "jazzHubId": {
                    "type": "string"
                },
                "lastSynchronized": {
                    "type": "string"
                },
                "mBox": {
                    "type": "string"
                },
                "manager": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "name": {
                    "$ref": "#/definitions/name"
                },
                "phone": {
                    "type": "string"
                },
                "primaryRole": {
                    "type": "string",
                    "description": "ID of Role"
                },
                "skypeId": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "vacationCapacity": {
                    "type": "number"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "proficiency": {
                                "type": "number"
                            },
                            "type": {
                                "type": "string",
                                "description": "ID of Skill"
                            }
                        }
                    }
                },
                "jobTitle": {
                    "type": "string",
                    "description": "ID of Job Title"
                },
                "secondaryRoles": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "ID of Role"
                    }
                },
                "partTimeHours": {
                    "type": "number"
                },
                "partTime": {
                    "type": "boolean"
                }
            },
            "required": [
                "name"
            ]
        },
        "name": {
            "type": "object",
            "properties": {
                "familyName": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "givenName": {
                    "type": "string"
                }
            }
        },
        "Project": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "committed": {
                    "type": "boolean"
                },
                "created": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "by": {
                            "type": "string",
                            "description": "ID of Person"
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "ID of Client"
                },
                "description": {
                    "type": "string"
                },
                "primaryContact": {
                    "type": "string"
                },
                "executiveSponsor": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "initStartDate": {
                    "type": "string",
                    "format": "date"
                },
                "initEndDate": {
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "by": {
                            "type": "string",
                            "description": "ID of Person"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "salesSponsor": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "startDate": {
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "type": "string",
                    "format": "date"
                },
                "state": {
                    "default": "planning",
                    "enum": [
                        "planning",
                        "active",
                        "done",
                        "poc",
                        "preSales",
                        "supportActive",
                        "clientActive"
                    ]
                },
                "type": {
                    "enum": [
                        "invest",
                        "poc",
                        "paid"
                    ]
                },
                "terms": {
                    "type": "object",
                    "properties": {
                        "fixedBidServicesRevenue": {
                            "type": "number"
                        },
                        "includesProjectManagementOverhead": {
                            "type": "boolean"
                        },
                        "billingFrequency": {
                            "type": "string"
                        },
                        "billingDate": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "softwareEstimate": {
                            "type": "number"
                        }
                    }
                },
                "phases": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/ProjectPhase"
                    }
                }
            },
            "required": [
                "client",
                "name",
                "type",
                "startDate",
                "state",
                "executiveSponsor"
            ]
        },
        "ProjectPhase": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "description": "ID of Project"
                },
                "startDate": {
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "type": "string",
                    "format": "date"
                }
            },
            "required": [
                "project",
                "name",
                "startDate"
            ]
        },
        "ProjectPhaseRole": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "phase": {
                    "type": "string",
                    "description": "ID of Project Phase"
                },
                "coveredKMin": {
                    "type": "number"
                },
                "daysGap": {
                    "type": "number"
                },
                "hoursExtraCovered": {
                    "type": [
                        "null",
                        "number"
                    ]
                },
                "hoursNeededToCover": {
                    "type": "number"
                },
                "isCurrentRole": {
                    "type": "boolean"
                },
                "isFutureRole": {
                    "type": "boolean"
                },
                "isPastRole": {
                    "type": "boolean"
                },
                "percentageCovered": {
                    "type": [
                        "null",
                        "number"
                    ]
                },
                "rate": {
                    "type": "object",
                    "properties": {
                        "estimatedTotal": {
                            "type": [
                                "null",
                                "number"
                            ]
                        },
                        "advAmount": {
                            "type": "number"
                        },
                        "amount": {
                            "type": "number"
                        },
                        "fullyUtilized": {
                            "type": "boolean"
                        },
                        "hoursPerMth": {
                            "type": [
                                "null",
                                "number"
                            ],
                            "maximum": 180
                        },
                        "hoursPerWeek": {
                            "type": [
                                "null",
                                "number"
                            ],
                            "maximum": 50
                        },
                        "loadedAmount": {
                            "type": "number"
                        },
                        "rateUnits": {
                            "enum": [
                                "$/hr",
                                "$/month"
                            ]
                        },
                        "type": {
                            "enum": [
                                "monthly",
                                "weekly",
                                "hourly"
                            ]
                        }
                    },
                    "required": [
                        "type"
                    ]
                },
                "shore": {
                    "type": "string",
                    "enum": [
                        "on",
                        "off"
                    ]
                },
                "originalAssignees": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "ID of Person"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "ID of Role"
                }
            },
            "required": [
                "phase",
                "type",
                "rate"
            ]
        },
        "ReportFavorite": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "person": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "params": {
                    "type": "object",
                    "properties": {
                        "dateRange": {
                            "type": "string"
                        },
                        "endDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "fields": {
                            "type": "object",
                            "properties": {
                                "all": {
                                    "type": "boolean"
                                },
                                "categoryHours": {
                                    "type": "object",
                                    "properties": {
                                        "marketing": {
                                            "type": "boolean"
                                        },
                                        "out": {
                                            "type": "object",
                                            "properties": {
                                                "all": {
                                                    "type": "boolean"
                                                },
                                                "holiday": {
                                                    "type": "boolean"
                                                },
                                                "sick": {
                                                    "type": "boolean"
                                                },
                                                "vacation": {
                                                    "type": "boolean"
                                                }
                                            }
                                        },
                                        "overhead": {
                                            "type": "object",
                                            "properties": {
                                                "admin": {
                                                    "type": "boolean"
                                                },
                                                "all": {
                                                    "type": "boolean"
                                                },
                                                "design": {
                                                    "type": "boolean"
                                                },
                                                "hr": {
                                                    "type": "boolean"
                                                },
                                                "meetings": {
                                                    "type": "boolean"
                                                },
                                                "rd": {
                                                    "type": "boolean"
                                                },
                                                "trainings": {
                                                    "type": "boolean"
                                                }
                                            }
                                        },
                                        "sales": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "goals": {
                                    "type": "object",
                                    "properties": {
                                        "all": {
                                            "type": "boolean"
                                        },
                                        "projectedClientHrs": {
                                            "type": "boolean"
                                        },
                                        "projectedInvestmentHrs": {
                                            "type": "boolean"
                                        },
                                        "projectedOOO": {
                                            "type": "boolean"
                                        },
                                        "utilGoals": {
                                            "type": "boolean"
                                        },
                                        "utilProjections": {
                                            "type": "boolean"
                                        },
                                        "projectedHrs": {
                                            "type": "boolean"
                                        },
                                        "projectedInvestment": {
                                            "type": "boolean"
                                        },
                                        "projectedRevenue": {
                                            "type": "boolean"
                                        },
                                        "projectedUtil": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "graphs": {
                                    "type": "object",
                                    "properties": {
                                        "graph": {
                                            "type": "boolean"
                                        },
                                        "percent": {
                                            "type": "object",
                                            "properties": {
                                                "all": {
                                                    "type": "boolean"
                                                },
                                                "out": {
                                                    "type": "boolean"
                                                },
                                                "overhead": {
                                                    "type": "boolean"
                                                }
                                            }
                                        },
                                        "trendGoals": {
                                            "type": "boolean"
                                        },
                                        "trendHrs": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "projectHours": {
                                    "type": "object",
                                    "properties": {
                                        "all": {
                                            "type": "boolean"
                                        },
                                        "actualClient": {
                                            "type": "boolean"
                                        },
                                        "actualInvestment": {
                                            "type": "boolean"
                                        },
                                        "estimatedClientHrs": {
                                            "type": "boolean"
                                        },
                                        "estimatedInvestmentHrs": {
                                            "type": "boolean"
                                        },
                                        "utilClientWork": {
                                            "type": "boolean"
                                        },
                                        "utilRole": {
                                            "type": "boolean"
                                        },
                                        "utilInvestmentWork": {
                                            "type": "boolean"
                                        },
                                        "assignmentUtilRate": {
                                            "type": "boolean"
                                        },
                                        "available": {
                                            "type": "boolean"
                                        },
                                        "overallUtilRate": {
                                            "type": "boolean"
                                        },
                                        "spent": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "assignmentHours": {
                                    "type": "object",
                                    "properties": {
                                        "all": {
                                            "type": "boolean"
                                        },
                                        "hoursAndDesc": {
                                            "type": "boolean"
                                        },
                                        "oooDetails": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "selectedAssignedRoles": {
                                    "type": "object",
                                    "properties": {
                                        "PM": {
                                            "type": "boolean"
                                        },
                                        "SE": {
                                            "type": "boolean"
                                        },
                                        "SEO": {
                                            "type": "boolean"
                                        },
                                        "SSEO": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        },
                        "projects": {
                            "type": "array",
                            "minItems": 0,
                            "items": {
                                "type": "string",
                                "description": "ID of Project"
                            }
                        },
                        "locations": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                                "type": "string"
                            }
                        },
                        "output": {
                            "type": "string"
                        },
                        "reportName": {
                            "type": "string"
                        },
                        "roles": {
                            "type": "array",
                            "minItems": 0,
                            "items": {
                                "type": "string"
                            }
                        },
                        "startDate": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                }
            },
            "required": [
                "params",
                "person",
                "type"
            ]
        },
        "UtilizationReport": {
            "type": "object",
            "properties": {
                "hours": {
                    "type": "object",
                    "properties": {
                        "projectHours": {
                            "type": "object",
                            "properties": {
                                "hours": {
                                    "type": "number"
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "Name of type (e.g. Invest, POC, Paid)",
                                                "enum": [
                                                    "invest",
                                                    "poc",
                                                    "paid"
                                                ]
                                            },
                                            "hours": {
                                                "type": "number"
                                            },
                                            "clients": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "description": "Name of Client"
                                                        },
                                                        "hours": {
                                                            "type": "number"
                                                        },
                                                        "projects": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string",
                                                                        "description": "Name of project"
                                                                    },
                                                                    "hours": {
                                                                        "type": "number"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "taskHours": {
                            "type": "object",
                            "properties": {
                                "hours": {
                                    "type": "number"
                                },
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "hours": {
                                                "type": "number"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "people": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "expectedHours": {
                                "type": "number"
                            },
                            "actualHours": {
                                "type": "number"
                            },
                            "difference": {
                                "type": "number"
                            },
                            "hours": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the project or task"
                                        },
                                        "type": {
                                            "type": "string",
                                            "description": "Type of hours record",
                                            "enum": [
                                                "project",
                                                "task"
                                            ]
                                        },
                                        "hours": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "abbreviation": {
                    "type": "string"
                },
                "hourlyAdvertisedRate": {
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "hourlyLoadedRate": {
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "isNonBillable": {
                    "type": "boolean"
                },
                "monthlyAdvertisedRate": {
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "monthlyLoadedRate": {
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "utilizationRate": {
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "required": [
                "title",
                "abbreviation"
            ]
        },
        "SecurityRole": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "permissions": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "name",
                            "permissions"
                        ]
                    }
                }
            },
            "required": [
                "name",
                "resources"
            ]
        },
        "Skill": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "required": [
                "title"
            ]
        },
        "Task": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "name"
            ]
        },
        "UserRole": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "userId": {
                    "type": "string",
                    "description": "Google ID of Person"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of Security Role"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "ID of Security Role"
                    }
                }
            },
            "required": [
                "roles"
            ]
        },
        "Vacation": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "person": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "manager": {
                    "type": "string",
                    "description": "ID of Person"
                },
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Approved",
                        "Pending",
                        "Cancelled",
                        "Denied"
                    ]
                },
                "days": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "required": [
                "person",
                "manager",
                "type",
                "status",
                "startDate",
                "endDate"
            ]
        },
        "Error": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "error": {
                    "type": "string"
                },
                "fields": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "oauth2": {
            "type": "oauth2",
            "authorizationUrl": "http://localhost:3000/auth/google",
            "flow": "implicit",
            "scopes": {
                "https://www.googleapis.com/auth/plus.login": "authenticated via Google Plus"
            }
        }
    },
    "security": [
        {
            "oauth2": [
                "https://www.googleapis.com/auth/plus.login"
            ]
        }
    ]
}